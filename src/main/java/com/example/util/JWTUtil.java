package com.example.util;import com.example.dto.JwtDTO;import com.example.entity.ProfileEntity;import com.example.exception.UnAuthorizedException;import io.jsonwebtoken.*;import jakarta.servlet.http.HttpServletRequest;import lombok.experimental.UtilityClass;import java.util.Date;@UtilityClasspublic class JWTUtil {    private final String secretKey = "!maz234^gikey";    private final int tokenLiveTime = 1000 * 3600 * 24 * 10; // 1-hour    public String encode(String login, String passwd) {        JwtBuilder jwtBuilder = Jwts.builder();        jwtBuilder.setIssuedAt(new Date());        jwtBuilder.signWith(SignatureAlgorithm.HS512, secretKey);        jwtBuilder.claim("login", login);        jwtBuilder.claim("passwd", passwd);        jwtBuilder.setExpiration(new Date(System.currentTimeMillis() + (tokenLiveTime)));        jwtBuilder.setIssuer("kunuz test portali");        return jwtBuilder.compact();    }    public JwtDTO decode(HttpServletRequest request) {        try {            String authorizationHeader = request.getHeader("Authorization");            if (authorizationHeader != null &&                    authorizationHeader.startsWith("Bearer ")) {                String token = authorizationHeader.substring(7); // Remove "Bearer " prefix                JwtParser jwtParser = Jwts.parser();                jwtParser.setSigningKey(secretKey);                Jws<Claims> jws = jwtParser.parseClaimsJws(token);                Claims claims = jws.getBody();                String login = claims.get("login", String.class);                String passwd = claims.get("passwd", String.class);                return new JwtDTO(login, passwd);            } else {                throw new UnAuthorizedException("Invalid or missing Authorization header");            }        } catch (JwtException e) {            throw new UnAuthorizedException("Your session expired or the token is invalid");        }    }    public JwtDTO decode2(String token) {        try {            JwtParser jwtParser = Jwts.parser();            jwtParser.setSigningKey(secretKey);            Jws<Claims> jws = jwtParser.parseClaimsJws(token);            Claims claims = jws.getBody();            String login = (String) claims.get("login");            String passwd = (String) claims.get("passwd");            return new JwtDTO(login, passwd);        } catch (JwtException e) {            throw new UnAuthorizedException("Your session expired!");        }    }}